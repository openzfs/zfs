From fcba4ff6f74d109128184c9c5a14f3a2bb2cee2c Mon Sep 17 00:00:00 2001
From: Darik Horn <dajhorn@vanadac.com>
Date: Tue, 17 Jan 2012 11:54:21 -0600
Subject: [PATCH 3/7] Remove all upstream init.d components.

The etc/init.d/ components are redundant because the debian/ overlay
bundles init files according to Debian packaging policy.
---
 configure.ac             |    1 -
 etc/Makefile.am          |    2 +-
 etc/init.d/.gitignore    |    1 -
 etc/init.d/Makefile.am   |   22 --
 etc/init.d/Makefile.in   |  562 ----------------------------------------------
 etc/init.d/zfs.arch.in   |   62 -----
 etc/init.d/zfs.fedora.in |  244 --------------------
 etc/init.d/zfs.gentoo.in |  111 ---------
 etc/init.d/zfs.lsb.in    |  130 -----------
 etc/init.d/zfs.lunar.in  |   95 --------
 etc/init.d/zfs.redhat.in |  176 ---------------
 11 files changed, 1 insertions(+), 1405 deletions(-)
 delete mode 100644 etc/init.d/.gitignore
 delete mode 100644 etc/init.d/Makefile.am
 delete mode 100644 etc/init.d/Makefile.in
 delete mode 100644 etc/init.d/zfs.arch.in
 delete mode 100644 etc/init.d/zfs.fedora.in
 delete mode 100644 etc/init.d/zfs.gentoo.in
 delete mode 100644 etc/init.d/zfs.lsb.in
 delete mode 100644 etc/init.d/zfs.lunar.in
 delete mode 100644 etc/init.d/zfs.redhat.in

diff --git a/configure.ac b/configure.ac
index e0cb5a5..fd443ed 100644
--- a/configure.ac
+++ b/configure.ac
@@ -61,7 +61,6 @@ AC_CONFIG_FILES([
 	udev/Makefile
 	udev/rules.d/Makefile
 	etc/Makefile
-	etc/init.d/Makefile
 	etc/zfs/Makefile
 	man/Makefile
 	man/man8/Makefile
diff --git a/etc/Makefile.am b/etc/Makefile.am
index 65882b5..b5e497f 100644
--- a/etc/Makefile.am
+++ b/etc/Makefile.am
@@ -1 +1 @@
-SUBDIRS = init.d zfs
+SUBDIRS = zfs
diff --git a/etc/init.d/.gitignore b/etc/init.d/.gitignore
deleted file mode 100644
index 73304bc..0000000
--- a/etc/init.d/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-zfs
diff --git a/etc/init.d/Makefile.am b/etc/init.d/Makefile.am
deleted file mode 100644
index c1b131b..0000000
--- a/etc/init.d/Makefile.am
+++ /dev/null
@@ -1,22 +0,0 @@
-initdir = $(DEFAULT_INIT_DIR)
-init_SCRIPTS = zfs
-
-EXTRA_DIST = \
-	$(top_srcdir)/etc/init.d/zfs.fedora.in \
-	$(top_srcdir)/etc/init.d/zfs.gentoo.in \
-	$(top_srcdir)/etc/init.d/zfs.lsb.in \
-	$(top_srcdir)/etc/init.d/zfs.lunar.in \
-	$(top_srcdir)/etc/init.d/zfs.redhat.in \
-	$(top_srcdir)/etc/init.d/zfs.arch.in
-
-$(init_SCRIPTS):
-	-$(SED) -e 's,@bindir\@,$(bindir),g' \
-		-e 's,@sbindir\@,$(sbindir),g' \
-		-e 's,@udevdir\@,$(udevdir),g' \
-		-e 's,@udevruledir\@,$(udevruledir),g' \
-		-e 's,@sysconfdir\@,$(sysconfdir),g' \
-		-e 's,@initdir\@,$(initdir),g' \
-		'$@.$(DEFAULT_INIT_SCRIPT).in' >'$@'
-
-distclean-local::
-	-$(RM) $(init_SCRIPTS)
diff --git a/etc/init.d/Makefile.in b/etc/init.d/Makefile.in
deleted file mode 100644
index 5879775..0000000
--- a/etc/init.d/Makefile.in
+++ /dev/null
@@ -1,562 +0,0 @@
-# Makefile.in generated by automake 1.11.1 from Makefile.am.
-# @configure_input@
-
-# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
-# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
-# Inc.
-# This Makefile.in is free software; the Free Software Foundation
-# gives unlimited permission to copy and/or distribute it,
-# with or without modifications, as long as this notice is preserved.
-
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
-# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
-# PARTICULAR PURPOSE.
-
-@SET_MAKE@
-
-VPATH = @srcdir@
-pkgdatadir = $(datadir)/@PACKAGE@
-pkgincludedir = $(includedir)/@PACKAGE@
-pkglibdir = $(libdir)/@PACKAGE@
-pkglibexecdir = $(libexecdir)/@PACKAGE@
-am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
-install_sh_DATA = $(install_sh) -c -m 644
-install_sh_PROGRAM = $(install_sh) -c
-install_sh_SCRIPT = $(install_sh) -c
-INSTALL_HEADER = $(INSTALL_DATA)
-transform = $(program_transform_name)
-NORMAL_INSTALL = :
-PRE_INSTALL = :
-POST_INSTALL = :
-NORMAL_UNINSTALL = :
-PRE_UNINSTALL = :
-POST_UNINSTALL = :
-build_triplet = @build@
-host_triplet = @host@
-target_triplet = @target@
-subdir = etc/init.d
-DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
-ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
-am__aclocal_m4_deps =  \
-	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
-	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
-	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
-	$(top_srcdir)/config/kernel-bdi-setup-and-register.m4 \
-	$(top_srcdir)/config/kernel-bdi.m4 \
-	$(top_srcdir)/config/kernel-bio-empty-barrier.m4 \
-	$(top_srcdir)/config/kernel-bio-end-io-t-args.m4 \
-	$(top_srcdir)/config/kernel-bio-failfast.m4 \
-	$(top_srcdir)/config/kernel-bio-rw-syncio.m4 \
-	$(top_srcdir)/config/kernel-blk-end-request.m4 \
-	$(top_srcdir)/config/kernel-blk-fetch-request.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-discard.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-io-opt.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-nonrot.m4 \
-	$(top_srcdir)/config/kernel-blk-queue-physical-block-size.m4 \
-	$(top_srcdir)/config/kernel-blk-requeue-request.m4 \
-	$(top_srcdir)/config/kernel-blk-rq-bytes.m4 \
-	$(top_srcdir)/config/kernel-blk-rq-pos.m4 \
-	$(top_srcdir)/config/kernel-blk-rq-sectors.m4 \
-	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
-	$(top_srcdir)/config/kernel-check-disk-size-change.m4 \
-	$(top_srcdir)/config/kernel-d-obtain-alias.m4 \
-	$(top_srcdir)/config/kernel-evict-inode.m4 \
-	$(top_srcdir)/config/kernel-fallocate.m4 \
-	$(top_srcdir)/config/kernel-fmode-t.m4 \
-	$(top_srcdir)/config/kernel-fsync.m4 \
-	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
-	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
-	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
-	$(top_srcdir)/config/kernel-kobj-name-len.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
-	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
-	$(top_srcdir)/config/kernel-rq-for-each_segment.m4 \
-	$(top_srcdir)/config/kernel-rq-is_sync.m4 \
-	$(top_srcdir)/config/kernel-security-inode-init.m4 \
-	$(top_srcdir)/config/kernel-set-nlink.m4 \
-	$(top_srcdir)/config/kernel-show-options.m4 \
-	$(top_srcdir)/config/kernel-shrink.m4 \
-	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
-	$(top_srcdir)/config/kernel-xattr-handler.m4 \
-	$(top_srcdir)/config/kernel.m4 \
-	$(top_srcdir)/config/user-arch.m4 \
-	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-ioctl.m4 \
-	$(top_srcdir)/config/user-libblkid.m4 \
-	$(top_srcdir)/config/user-libuuid.m4 \
-	$(top_srcdir)/config/user-nptl_guard_within_stack.m4 \
-	$(top_srcdir)/config/user-selinux.m4 \
-	$(top_srcdir)/config/user-udev.m4 \
-	$(top_srcdir)/config/user-zlib.m4 $(top_srcdir)/config/user.m4 \
-	$(top_srcdir)/config/zfs-build.m4 \
-	$(top_srcdir)/config/zfs-meta.m4 $(top_srcdir)/configure.ac
-am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
-	$(ACLOCAL_M4)
-mkinstalldirs = $(install_sh) -d
-CONFIG_HEADER = $(top_builddir)/zfs_config.h
-CONFIG_CLEAN_FILES =
-CONFIG_CLEAN_VPATH_FILES =
-am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
-am__vpath_adj = case $$p in \
-    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
-    *) f=$$p;; \
-  esac;
-am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
-am__install_max = 40
-am__nobase_strip_setup = \
-  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
-am__nobase_strip = \
-  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
-am__nobase_list = $(am__nobase_strip_setup); \
-  for p in $$list; do echo "$$p $$p"; done | \
-  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
-  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
-    if (++n[$$2] == $(am__install_max)) \
-      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
-    END { for (dir in files) print dir, files[dir] }'
-am__base_list = \
-  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
-  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
-am__installdirs = "$(DESTDIR)$(initdir)"
-SCRIPTS = $(init_SCRIPTS)
-AM_V_GEN = $(am__v_GEN_$(V))
-am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
-am__v_GEN_0 = @echo "  GEN   " $@;
-AM_V_at = $(am__v_at_$(V))
-am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
-am__v_at_0 = @
-SOURCES =
-DIST_SOURCES =
-DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
-ACLOCAL = @ACLOCAL@
-ALIEN = @ALIEN@
-ALIEN_VERSION = @ALIEN_VERSION@
-AMTAR = @AMTAR@
-AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
-AR = @AR@
-AUTOCONF = @AUTOCONF@
-AUTOHEADER = @AUTOHEADER@
-AUTOMAKE = @AUTOMAKE@
-AWK = @AWK@
-CC = @CC@
-CCAS = @CCAS@
-CCASDEPMODE = @CCASDEPMODE@
-CCASFLAGS = @CCASFLAGS@
-CCDEPMODE = @CCDEPMODE@
-CFLAGS = @CFLAGS@
-CPP = @CPP@
-CPPFLAGS = @CPPFLAGS@
-CYGPATH_W = @CYGPATH_W@
-DEBUG_CFLAGS = @DEBUG_CFLAGS@
-DEBUG_DMU_TX = @DEBUG_DMU_TX@
-DEBUG_STACKFLAGS = @DEBUG_STACKFLAGS@
-DEBUG_ZFS = @DEBUG_ZFS@
-DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
-DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
-DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
-DEFS = @DEFS@
-DEPDIR = @DEPDIR@
-DPKG = @DPKG@
-DPKGBUILD = @DPKGBUILD@
-DPKGBUILD_VERSION = @DPKGBUILD_VERSION@
-DPKG_VERSION = @DPKG_VERSION@
-DSYMUTIL = @DSYMUTIL@
-DUMPBIN = @DUMPBIN@
-ECHO_C = @ECHO_C@
-ECHO_N = @ECHO_N@
-ECHO_T = @ECHO_T@
-EGREP = @EGREP@
-EXEEXT = @EXEEXT@
-FGREP = @FGREP@
-FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
-GREP = @GREP@
-HAVE_ALIEN = @HAVE_ALIEN@
-HAVE_DPKG = @HAVE_DPKG@
-HAVE_DPKGBUILD = @HAVE_DPKGBUILD@
-HAVE_MAKEPKG = @HAVE_MAKEPKG@
-HAVE_PACMAN = @HAVE_PACMAN@
-HAVE_RPM = @HAVE_RPM@
-HAVE_RPMBUILD = @HAVE_RPMBUILD@
-INSTALL = @INSTALL@
-INSTALL_DATA = @INSTALL_DATA@
-INSTALL_PROGRAM = @INSTALL_PROGRAM@
-INSTALL_SCRIPT = @INSTALL_SCRIPT@
-INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
-KERNELCPPFLAGS = @KERNELCPPFLAGS@
-KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
-LD = @LD@
-LDFLAGS = @LDFLAGS@
-LIBBLKID = @LIBBLKID@
-LIBOBJS = @LIBOBJS@
-LIBS = @LIBS@
-LIBSELINUX = @LIBSELINUX@
-LIBTOOL = @LIBTOOL@
-LIBUUID = @LIBUUID@
-LINUX = @LINUX@
-LINUX_OBJ = @LINUX_OBJ@
-LINUX_SYMBOLS = @LINUX_SYMBOLS@
-LINUX_VERSION = @LINUX_VERSION@
-LIPO = @LIPO@
-LN_S = @LN_S@
-LTLIBOBJS = @LTLIBOBJS@
-MAINT = @MAINT@
-MAKEINFO = @MAKEINFO@
-MAKEPKG = @MAKEPKG@
-MAKEPKG_VERSION = @MAKEPKG_VERSION@
-MKDIR_P = @MKDIR_P@
-NM = @NM@
-NMEDIT = @NMEDIT@
-NO_UNUSED_BUT_SET_VARIABLE = @NO_UNUSED_BUT_SET_VARIABLE@
-OBJDUMP = @OBJDUMP@
-OBJEXT = @OBJEXT@
-OTOOL = @OTOOL@
-OTOOL64 = @OTOOL64@
-PACKAGE = @PACKAGE@
-PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
-PACKAGE_NAME = @PACKAGE_NAME@
-PACKAGE_STRING = @PACKAGE_STRING@
-PACKAGE_TARNAME = @PACKAGE_TARNAME@
-PACKAGE_VERSION = @PACKAGE_VERSION@
-PACMAN = @PACMAN@
-PACMAN_VERSION = @PACMAN_VERSION@
-PATH_SEPARATOR = @PATH_SEPARATOR@
-RANLIB = @RANLIB@
-RPM = @RPM@
-RPMBUILD = @RPMBUILD@
-RPMBUILD_VERSION = @RPMBUILD_VERSION@
-RPM_VERSION = @RPM_VERSION@
-SED = @SED@
-SET_MAKE = @SET_MAKE@
-SHELL = @SHELL@
-SPL = @SPL@
-SPL_OBJ = @SPL_OBJ@
-SPL_SYMBOLS = @SPL_SYMBOLS@
-SPL_VERSION = @SPL_VERSION@
-STRIP = @STRIP@
-TARGET_ASM_DIR = @TARGET_ASM_DIR@
-VENDOR = @VENDOR@
-VERSION = @VERSION@
-ZFS_CONFIG = @ZFS_CONFIG@
-ZFS_META_ALIAS = @ZFS_META_ALIAS@
-ZFS_META_AUTHOR = @ZFS_META_AUTHOR@
-ZFS_META_DATA = @ZFS_META_DATA@
-ZFS_META_LICENSE = @ZFS_META_LICENSE@
-ZFS_META_LT_AGE = @ZFS_META_LT_AGE@
-ZFS_META_LT_CURRENT = @ZFS_META_LT_CURRENT@
-ZFS_META_LT_REVISION = @ZFS_META_LT_REVISION@
-ZFS_META_NAME = @ZFS_META_NAME@
-ZFS_META_RELEASE = @ZFS_META_RELEASE@
-ZFS_META_VERSION = @ZFS_META_VERSION@
-ZLIB = @ZLIB@
-abs_builddir = @abs_builddir@
-abs_srcdir = @abs_srcdir@
-abs_top_builddir = @abs_top_builddir@
-abs_top_srcdir = @abs_top_srcdir@
-ac_ct_CC = @ac_ct_CC@
-ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
-am__include = @am__include@
-am__leading_dot = @am__leading_dot@
-am__quote = @am__quote@
-am__tar = @am__tar@
-am__untar = @am__untar@
-bindir = @bindir@
-build = @build@
-build_alias = @build_alias@
-build_cpu = @build_cpu@
-build_os = @build_os@
-build_vendor = @build_vendor@
-builddir = @builddir@
-datadir = @datadir@
-datarootdir = @datarootdir@
-docdir = @docdir@
-dvidir = @dvidir@
-exec_prefix = @exec_prefix@
-host = @host@
-host_alias = @host_alias@
-host_cpu = @host_cpu@
-host_os = @host_os@
-host_vendor = @host_vendor@
-htmldir = @htmldir@
-includedir = @includedir@
-infodir = @infodir@
-install_sh = @install_sh@
-libdir = @libdir@
-libexecdir = @libexecdir@
-localedir = @localedir@
-localstatedir = @localstatedir@
-lt_ECHO = @lt_ECHO@
-mandir = @mandir@
-mkdir_p = @mkdir_p@
-oldincludedir = @oldincludedir@
-pdfdir = @pdfdir@
-prefix = @prefix@
-program_transform_name = @program_transform_name@
-psdir = @psdir@
-sbindir = @sbindir@
-sharedstatedir = @sharedstatedir@
-srcdir = @srcdir@
-sysconfdir = @sysconfdir@
-target = @target@
-target_alias = @target_alias@
-target_cpu = @target_cpu@
-target_os = @target_os@
-target_vendor = @target_vendor@
-top_build_prefix = @top_build_prefix@
-top_builddir = @top_builddir@
-top_srcdir = @top_srcdir@
-udevdir = @udevdir@
-udevruledir = @udevruledir@
-initdir = $(DEFAULT_INIT_DIR)
-init_SCRIPTS = zfs
-EXTRA_DIST = \
-	$(top_srcdir)/etc/init.d/zfs.fedora.in \
-	$(top_srcdir)/etc/init.d/zfs.gentoo.in \
-	$(top_srcdir)/etc/init.d/zfs.lsb.in \
-	$(top_srcdir)/etc/init.d/zfs.lunar.in \
-	$(top_srcdir)/etc/init.d/zfs.redhat.in \
-	$(top_srcdir)/etc/init.d/zfs.arch.in
-
-all: all-am
-
-.SUFFIXES:
-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
-	@for dep in $?; do \
-	  case '$(am__configure_deps)' in \
-	    *$$dep*) \
-	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
-	        && { if test -f $@; then exit 0; else break; fi; }; \
-	      exit 1;; \
-	  esac; \
-	done; \
-	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu etc/init.d/Makefile'; \
-	$(am__cd) $(top_srcdir) && \
-	  $(AUTOMAKE) --gnu etc/init.d/Makefile
-.PRECIOUS: Makefile
-Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
-	@case '$?' in \
-	  *config.status*) \
-	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
-	  *) \
-	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
-	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
-	esac;
-
-$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
-	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
-
-$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
-	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
-$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
-	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
-$(am__aclocal_m4_deps):
-install-initSCRIPTS: $(init_SCRIPTS)
-	@$(NORMAL_INSTALL)
-	test -z "$(initdir)" || $(MKDIR_P) "$(DESTDIR)$(initdir)"
-	@list='$(init_SCRIPTS)'; test -n "$(initdir)" || list=; \
-	for p in $$list; do \
-	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
-	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
-	done | \
-	sed -e 'p;s,.*/,,;n' \
-	    -e 'h;s|.*|.|' \
-	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
-	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
-	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
-	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
-	      if (++n[d] == $(am__install_max)) { \
-		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
-	    else { print "f", d "/" $$4, $$1 } } \
-	  END { for (d in files) print "f", d, files[d] }' | \
-	while read type dir files; do \
-	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
-	     test -z "$$files" || { \
-	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(initdir)$$dir'"; \
-	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(initdir)$$dir" || exit $$?; \
-	     } \
-	; done
-
-uninstall-initSCRIPTS:
-	@$(NORMAL_UNINSTALL)
-	@list='$(init_SCRIPTS)'; test -n "$(initdir)" || exit 0; \
-	files=`for p in $$list; do echo "$$p"; done | \
-	       sed -e 's,.*/,,;$(transform)'`; \
-	test -n "$$list" || exit 0; \
-	echo " ( cd '$(DESTDIR)$(initdir)' && rm -f" $$files ")"; \
-	cd "$(DESTDIR)$(initdir)" && rm -f $$files
-
-mostlyclean-libtool:
-	-rm -f *.lo
-
-clean-libtool:
-	-rm -rf .libs _libs
-tags: TAGS
-TAGS:
-
-ctags: CTAGS
-CTAGS:
-
-
-distdir: $(DISTFILES)
-	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
-	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
-	list='$(DISTFILES)'; \
-	  dist_files=`for file in $$list; do echo $$file; done | \
-	  sed -e "s|^$$srcdirstrip/||;t" \
-	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
-	case $$dist_files in \
-	  */*) $(MKDIR_P) `echo "$$dist_files" | \
-			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
-			   sort -u` ;; \
-	esac; \
-	for file in $$dist_files; do \
-	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
-	  if test -d $$d/$$file; then \
-	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
-	    if test -d "$(distdir)/$$file"; then \
-	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
-	    fi; \
-	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
-	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
-	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
-	    fi; \
-	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
-	  else \
-	    test -f "$(distdir)/$$file" \
-	    || cp -p $$d/$$file "$(distdir)/$$file" \
-	    || exit 1; \
-	  fi; \
-	done
-check-am: all-am
-check: check-am
-all-am: Makefile $(SCRIPTS)
-installdirs:
-	for dir in "$(DESTDIR)$(initdir)"; do \
-	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
-	done
-install: install-am
-install-exec: install-exec-am
-install-data: install-data-am
-uninstall: uninstall-am
-
-install-am: all-am
-	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
-
-installcheck: installcheck-am
-install-strip:
-	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
-	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
-	  `test -z '$(STRIP)' || \
-	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
-mostlyclean-generic:
-
-clean-generic:
-
-distclean-generic:
-	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
-	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
-
-maintainer-clean-generic:
-	@echo "This command is intended for maintainers to use"
-	@echo "it deletes files that may require special tools to rebuild."
-clean: clean-am
-
-clean-am: clean-generic clean-libtool mostlyclean-am
-
-distclean: distclean-am
-	-rm -f Makefile
-distclean-am: clean-am distclean-generic distclean-local
-
-dvi: dvi-am
-
-dvi-am:
-
-html: html-am
-
-html-am:
-
-info: info-am
-
-info-am:
-
-install-data-am: install-initSCRIPTS
-
-install-dvi: install-dvi-am
-
-install-dvi-am:
-
-install-exec-am:
-
-install-html: install-html-am
-
-install-html-am:
-
-install-info: install-info-am
-
-install-info-am:
-
-install-man:
-
-install-pdf: install-pdf-am
-
-install-pdf-am:
-
-install-ps: install-ps-am
-
-install-ps-am:
-
-installcheck-am:
-
-maintainer-clean: maintainer-clean-am
-	-rm -f Makefile
-maintainer-clean-am: distclean-am maintainer-clean-generic
-
-mostlyclean: mostlyclean-am
-
-mostlyclean-am: mostlyclean-generic mostlyclean-libtool
-
-pdf: pdf-am
-
-pdf-am:
-
-ps: ps-am
-
-ps-am:
-
-uninstall-am: uninstall-initSCRIPTS
-
-.MAKE: install-am install-strip
-
-.PHONY: all all-am check check-am clean clean-generic clean-libtool \
-	distclean distclean-generic distclean-libtool distclean-local \
-	distdir dvi dvi-am html html-am info info-am install \
-	install-am install-data install-data-am install-dvi \
-	install-dvi-am install-exec install-exec-am install-html \
-	install-html-am install-info install-info-am \
-	install-initSCRIPTS install-man install-pdf install-pdf-am \
-	install-ps install-ps-am install-strip installcheck \
-	installcheck-am installdirs maintainer-clean \
-	maintainer-clean-generic mostlyclean mostlyclean-generic \
-	mostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \
-	uninstall-initSCRIPTS
-
-
-$(init_SCRIPTS):
-	-$(SED) -e 's,@bindir\@,$(bindir),g' \
-		-e 's,@sbindir\@,$(sbindir),g' \
-		-e 's,@udevdir\@,$(udevdir),g' \
-		-e 's,@udevruledir\@,$(udevruledir),g' \
-		-e 's,@sysconfdir\@,$(sysconfdir),g' \
-		-e 's,@initdir\@,$(initdir),g' \
-		'$@.$(DEFAULT_INIT_SCRIPT).in' >'$@'
-
-distclean-local::
-	-$(RM) $(init_SCRIPTS)
-
-# Tell versions [3.59,3.63) of GNU make to not export all variables.
-# Otherwise a system limit (for SysV at least) may be exceeded.
-.NOEXPORT:
diff --git a/etc/init.d/zfs.arch.in b/etc/init.d/zfs.arch.in
deleted file mode 100644
index de2ea8a..0000000
--- a/etc/init.d/zfs.arch.in
+++ /dev/null
@@ -1,62 +0,0 @@
-#!/bin/bash
-
-. /etc/rc.conf
-. /etc/rc.d/functions
-
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-
-case "$1" in
-  start)
-    stat_busy "Starting zfs"
-
-    if [ ! -c /dev/zfs ]; then
-      modprobe zfs
-      if [ $? -ne 0 ]; then
-        stat_fail
-        exit 1
-      fi
-    fi
-
-    # Import ZFS pools (via cache file)
-    if [ -f $ZPOOL_CACHE ]; then
-      $ZPOOL import -c $ZPOOL_CACHE -aN 2>/dev/null
-      if [ $? -ne 0 ]; then
-        stat_fail
-        exit 1
-      fi
-    fi
-
-    # Mount ZFS filesystems
-    $ZFS mount -a
-    if [ $? -ne 0 ]; then
-        stat_fail
-        exit 1
-    fi
-
-    # Export ZFS flesystems
-    $ZFS share -a
-    if [ $? -ne 0 ]; then
-        stat_fail
-        exit 1
-    fi
-
-    add_daemon zfs
-    stat_done
-    ;;
-  stop)
-    stat_busy "Stopping zfs"
-    $ZFS umount -a
-    rm_daemon zfs
-    stat_done
-    ;;
-  restart)
-    $0 stop
-    $0 start
-    ;;
-  *)
-    echo "usage: $0 {start|stop|restart}"
-esac
-
-exit 0
diff --git a/etc/init.d/zfs.fedora.in b/etc/init.d/zfs.fedora.in
deleted file mode 100644
index 04f2077..0000000
--- a/etc/init.d/zfs.fedora.in
+++ /dev/null
@@ -1,244 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start:
-# Required-Stop:
-# Should-Start:
-# Should-Stop:
-# Default-Start: 2 3 4 5
-# Default-Stop: 1
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-export PATH=/usr/local/sbin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
-
-# Source function library & LSB routines
-. /etc/rc.d/init.d/functions
-
-# script variables
-RETVAL=0
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-servicename=zfs
-LOCKFILE=/var/lock/subsys/$servicename
-
-# functions
-zfs_installed() {
-	modinfo zfs > /dev/null 2>&1 || return 5
-	$ZPOOL  > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	$ZFS    > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	return 0
-}
-
-reregister_mounts() {
-	cat /etc/mtab | while read -r fs mntpnt fstype opts rest ; do
-		fs=`printf '%b\n' "$fs"`
-		mntpnt=`printf '%b\n' "$mntpnt"`
-		if [ "$fstype" == "zfs" ] ; then
-			if [ "$mntpnt" == "/" ] ; then
-				mount -f -o zfsutil -t zfs --move / /removethismountpointhoweverpossible
-				umount --fake /removethismountpointhoweverpossible
-			else
-				umount --fake "$mntpnt"
-			fi
-		elif echo "$fs" | grep -q "^/dev/zd" ; then
-			if [ "$mntpnt" == "/" ] ; then
-				mount -f -t "$fstype" --move / /removethismountpointhoweverpossible
-				umount --fake /removethismountpointhoweverpossible
-			else
-				umount --fake "$mntpnt"
-			fi
-		fi
-	done
-	cat /proc/mounts | while read -r fs mntpnt fstype opts rest ; do
-		fs=`printf '%b\n' "$fs"`
-		mntpnt=`printf '%b\n' "$mntpnt"`
-		if [ "$fstype" == "zfs" ] ; then
-			mount -f -t zfs -o zfsutil "$fs" "$mntpnt"
-		elif echo "$fs" | grep -q "^/dev/zd" ; then
-			mount -f -t "$fstype" -o "$opts" "$fs" "$mntpnt"
-		fi
-	done
-}
-
-# i need a bash guru to simplify this, since this is copy and paste, but donno how
-# to correctly dereference variable names in bash, or how to do this right
-
-declare -A MTAB
-declare -A FSTAB
-
-# first parameter is a regular expression that filters mtab
-read_mtab() {
-        for fs in "${!MTAB[@]}" ; do unset MTAB["$fs"] ; done
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                MTAB["$fs"]=$mntpnt
-        done < <(grep "$1" /etc/mtab)
-}
-
-in_mtab() {
-        [ "${MTAB[$1]}" != "" ]
-        return $?
-}
-
-# first parameter is a regular expression that filters fstab
-read_fstab() {
-        for fs in "${!FSTAB[@]}" ; do unset FSTAB["$fs"] ; done
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                FSTAB["$fs"]=$mntpnt
-        done < <(grep "$1" /etc/fstab)
-}
-
-in_fstab() {
-        [ "${FSTAB[$1]}" != "" ]
-        return $?
-}
-
-start()
-{
-	if [ -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-        # Requires selinux policy which has not been written.
-        if [ -r "/selinux/enforce" ] &&
-           [ "$(cat /selinux/enforce)" = "1" ]; then
-                action $"SELinux ZFS policy required: " /bin/false || return 6
-        fi
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	# load kernel module infrastructure
-	if ! grep -q zfs /proc/modules ; then
-		action $"Loading kernel ZFS infrastructure: " modprobe zfs || return 5
-	fi
-
-	# fix mtab to include already-mounted fs filesystems, in case there are any
-	# we ONLY do this if mtab does not point to /proc/mounts
-	# which is the case in some systems (systemd may bring that soon)
-	if ! readlink /etc/mtab | grep -q /proc ; then
-		if grep -qE "(^/dev/zd| zfs )" /proc/mounts ; then
-			action $"Registering already-mounted ZFS filesystems and volumes: " reregister_mounts || return 150
-		fi
-	fi
-
-        if [ -f $ZPOOL_CACHE ] ; then
-
-		echo -n $"Importing ZFS pools not yet imported: "
-		$ZPOOL import -c $ZPOOL_CACHE -aN || true # stupid zpool will fail if all pools are already imported
-		RETVAL=$?
-		if [ $RETVAL -ne 0 ]; then
-			failure "Importing ZFS pools not yet imported: "
-			return 151
-		fi
-		success "Importing ZFS pools not yet imported: "
-
-	fi
-
-	action $"Mounting ZFS filesystems not yet mounted: " $ZFS mount -a || return 152
-
-	action $"Exporting ZFS filesystems: " $ZFS share -a || return 153
-
-	read_mtab  "^/dev/zd"
-	read_fstab "^/dev/zd"
-
-	template=$"Mounting volume %s registered in fstab: "
-	for volume in "${!FSTAB[@]}" ; do
-		if in_mtab "$volume" ; then continue ; fi
-		string=`printf "$template" "$volume"`
-		action "$string" mount "$volume"
-	done
-
-	touch "$LOCKFILE"
-}
-
-stop()
-{
-	if [ ! -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# the poweroff of the system takes care of this
-	# but it never unmounts the root filesystem itself
-	# shit
-
-	action $"Syncing ZFS filesystems: " sync
-	     # about the only thing we can do, and then we
-	     # hope that the umount process will succeed
-	     # unfortunately the umount process does not dismount
-	     # the root file system, there ought to be some way
-	     # we can tell zfs to just flush anything in memory
-	     # when a request to remount,ro comes in
-
-	#echo -n $"Unmounting ZFS filesystems: "
-	#$ZFS umount -a
-	#RETVAL=$?
-	#if [ $RETVAL -ne 0 ]; then
-	#	failure
-
-	#	return 8
-	#fi
-	#success
-
-	rm -f "$LOCKFILE"
-}
-
-# See how we are called
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		lsmod | grep -q zfs || RETVAL=3
-		$ZPOOL status && echo && $ZFS list || {
-			[ -f "$LOCKFILE" ] && RETVAL=2 || RETVAL=4
-		}
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ] ; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		RETVAL=3
-		;;
-esac
-
-exit $RETVAL
diff --git a/etc/init.d/zfs.gentoo.in b/etc/init.d/zfs.gentoo.in
deleted file mode 100644
index 767aba8..0000000
--- a/etc/init.d/zfs.gentoo.in
+++ /dev/null
@@ -1,111 +0,0 @@
-#!/sbin/runscript
-# Copyright 1999-2011 Gentoo Foundation
-# Distributed under the terms of the GNU General Public License v2
-# $Header: /var/cvsroot/gentoo-x86/sys-fs/zfs/files/zfs,v 0.9 2011/04/30 10:13:43 devsk Exp $
-
-depend()
-{
-	# bootmisc will log to /var which may be a different zfs than root.
-	before net bootmisc
-	after udev localmount
-	keyword -lxc -openvz -prefix -vserver
-}
-
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-ZFS_MODULE=zfs
-
-checksystem() {
-	if [ ! -c /dev/zfs ]; then
-		einfo "Checking if ZFS modules present"
-		if [ "x$(modprobe -l  $ZFS_MODULE | grep $ZFS_MODULE)" == "x" ]; then
-			eerror "$ZFS_MODULE not found. Is the ZFS package installed?"
-			return 1
-		fi
-	fi
-	einfo "Checking if zfs userspace tools present"
-		if [ ! -x $ZPOOL ]; then
-			eerror "$ZPOOL binary not found."
-			return 1
-		fi
-		if [ ! -x $ZFS ]; then
-			eerror "$ZFS binary not found."
-			return 1
-		fi
-	return 0
-}
-
-start() {
-	ebegin "Starting ZFS"
-	checksystem || return 1
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	if [ ! -c /dev/zfs ]; then
-		modprobe $ZFS_MODULE
-		rv=$?
-		if [ $rv -ne 0 ]; then
-			eerror "Failed to load the $ZFS_MODULE module, check 'dmesg|tail'."
-			eend $rv
-			return $rv
-		fi
-	fi
-
-	# Import all pools described by the cache file, and then mount
-	# all filesystem based on their properties.
-	if [ -f $ZPOOL_CACHE ]; then
-		einfo "Importing ZFS pools"
-		# as per fedora script, import can fail if all pools are already imported
-		# The check for $rv makes no sense...but someday, it will work right.
-		$ZPOOL import -c $ZPOOL_CACHE -aN 2>/dev/null || true
-		rv=$?
-		if [ $rv -ne 0 ]; then
-			eerror "Failed to import not-yet imported pools."
-			eend $rv
-			return $rv
-		fi
-	fi
-
-	einfo "Mounting ZFS filesystems"
-	$ZFS mount -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		eerror "Failed to mount ZFS filesystems."
-		eend $rv
-		return $rv
-	fi
-
-	einfo "Exporting ZFS filesystems"
-	$ZFS share -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		eerror "Failed to export ZFS filesystems."
-		eend $rv
-		return $rv
-	fi
-
-	eend 0
-	return 0
-}
-
-stop()
-{
-	ebegin "Unmounting ZFS filesystems"
-	$ZFS umount -a
-	rv=$?
-	if [ $rv -ne 0 ]; then
-		einfo "Some ZFS filesystems not unmounted"
-	fi
-
-	# Don't fail if we couldn't umount everything.  /usr might be in use.
-	eend 0
-	return 0
-}
-
-status()
-{
-	# show pool status and list
-	$ZPOOL status && echo && $ZPOOL list
-}
diff --git a/etc/init.d/zfs.lsb.in b/etc/init.d/zfs.lsb.in
deleted file mode 100644
index 3d04206..0000000
--- a/etc/init.d/zfs.lsb.in
+++ /dev/null
@@ -1,130 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start: $local_fs
-# Required-Stop: $local_fs
-# Default-Start:     2 3 4 5
-# Default-Stop:      0 1 6
-# Should-Stop:
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-# Source function library.
-. /lib/lsb/init-functions
-
-LOCKFILE=/var/lock/zfs
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-
-# Source zfs configuration.
-[ -r '/etc/default/zfs' ] &&  . /etc/default/zfs
-
-[ -x "$ZPOOL" ] || exit 1
-[ -x "$ZFS" ] || exit 2
-
-start()
-{
-	[ -f "$LOCKFILE" ] && return 3
-
-	# Requires selinux policy which has not been written.
-	if [ -r "/selinux/enforce" ] &&
-	   [ "$(cat /selinux/enforce)" = "1" ]; then
-
-		log_failure_msg "SELinux ZFS policy required"
-		return 4
-	fi
-
-	# Delay until all required block devices are present.
-	udevadm settle
-
-	# Load the zfs module stack
-	/sbin/modprobe zfs
-
-	# Ensure / exists in /etc/mtab, if not update mtab accordingly.
-	# This should be handled by rc.sysinit but lets be paranoid.
-	awk '$2 == "/" { exit 1 }' /etc/mtab
-	RETVAL=$?
-	if [ "$RETVAL" -eq 0 ]; then
-		/bin/mount -f /
-	fi
-
-	# Import all pools described by the cache file, and then mount
-	# all filesystem based on their properties.
-	if [ -f "$ZPOOL_CACHE" ] ; then
-		log_begin_msg "Importing ZFS pools"
-		"$ZPOOL" import -c "$ZPOOL_CACHE" -aN 2>/dev/null
-		log_end_msg $?
-
-		log_begin_msg "Mounting ZFS filesystems"
-		"$ZFS" mount -a
-		log_end_msg $?
-
-		log_begin_msg "Exporting ZFS filesystems"
-		"$ZFS" share -a
-		log_end_msg $?
-	fi
-
-	touch "$LOCKFILE"
-}
-
-stop()
-{
-	[ ! -f "$LOCKFILE" ] && return 3
-
-	log_begin_msg "Unmounting ZFS filesystems"
-	"$ZFS" umount -a
-	log_end_msg $?
-
-	rm -f "$LOCKFILE"
-}
-
-status()
-{
-	[ ! -f "$LOCKFILE" ] && return 3
-
-	"$ZPOOL" status && echo "" && "$ZPOOL" list
-}
-
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		status
-		RETVAL=$?
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ]; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		;;
-esac
-
-exit $RETVAL
diff --git a/etc/init.d/zfs.lunar.in b/etc/init.d/zfs.lunar.in
deleted file mode 100644
index 97384dc..0000000
--- a/etc/init.d/zfs.lunar.in
+++ /dev/null
@@ -1,95 +0,0 @@
-#!/bin/bash
-#
-# zfs           This shell script takes care of starting (mount) and
-#               stopping (umount) zfs shares.
-#
-# chkconfig: 35 60 40
-# description: ZFS is a filesystem developed by Sun, ZFS is a
-#              combined file system and logical volume manager
-#              designed by Sun Microsystems. Made available to Linux
-#              using SPL (Solaris Porting Layer) by zfsonlinux.org.
-# probe: true
-
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-
-case $1 in
-  start)  echo "$1ing ZFS filesystems"
-
-    # Delay until all required block devices are present.
-    udevadm settle
-
-    if ! grep "zfs" /proc/modules > /dev/null; then
-      echo "ZFS kernel module not loaded yet; loading...";
-      if ! modprobe zfs; then
-        echo "Failed to load ZFS kernel module...";
-        exit 0;
-      fi
-    fi
-
-    if ! [ `uname -m` == "x86_64" ]; then
-      echo "Warning: You're not running 64bit. Currently native zfs in";
-      echo "         linux is only supported and tested on 64bit.";
-      # should we break here? People doing this should know what they
-      # do, thus i'm not breaking here.
-    fi
-
-    # mount the filesystems
-    while IFS= read -r -d $'\n' dev; do
-      mdev=$(echo "$dev" | awk '{ print $1; }')
-      echo -n "mounting $mdev..."
-      if $ZFS mount $mdev; then
-        echo -e "done";
-      else
-        echo -e "failed";
-      fi
-    done < <($ZFS list -H);
-
-    # export the filesystems
-    echo -n "exporting ZFS filesystems..."
-    if $ZFS share -a; then
-      echo -e "done";
-    else
-      echo -e "failed";
-    fi
-
-
-  ;;
-
-  stop)  echo "$1ping ZFS filesystems"
-
-    if grep "zfs" /proc/modules > /dev/null; then
-      # module is loaded, so we can try to umount filesystems
-      while IFS= read -r -d $'\n' dev; do
-        mdev=$(echo "$dev" | awk '{ print $1 }');
-        echo -n "umounting $mdev...";
-        if $ZFS umount $mdev; then
-          echo -e "done";
-        else
-          echo -e "failed";
-        fi
-        # the next line is, because i have to reverse the
-        # output, otherwise it wouldn't work as it should
-      done < <($ZFS list -H | tac);
-
-      # and finally let's rmmod the module
-      rmmod zfs
-
-
-    else
-      # module not loaded, no need to umount anything
-      exit 0
-    fi
-
-  ;;
-
-  restart) echo "$1ing ZFS filesystems"
-    $0 stop
-    $0 start
-  ;;
-
-  *)  echo "Usage: $0 {start|stop|restart}"
-  ;;
-
-esac
diff --git a/etc/init.d/zfs.redhat.in b/etc/init.d/zfs.redhat.in
deleted file mode 100644
index ae797c1..0000000
--- a/etc/init.d/zfs.redhat.in
+++ /dev/null
@@ -1,176 +0,0 @@
-#!/bin/bash
-#
-# zfs           This script will mount/umount the zfs filesystems.
-#
-# chkconfig:    2345 01 99
-# description:  This script will mount/umount the zfs filesystems during
-#               system boot/shutdown.  Configuration of which filesystems
-#               should be mounted is handled by the zfs 'mountpoint' and
-#               'canmount' properties.  See the zfs(8) man page for details.
-#               It is also responsible for all userspace zfs services.
-#
-### BEGIN INIT INFO
-# Provides: zfs
-# Required-Start:
-# Required-Stop:
-# Should-Start:
-# Should-Stop:
-# Default-Start: 2 3 4 5
-# Default-Stop: 1
-# Short-Description: Mount/umount the zfs filesystems
-# Description: ZFS is an advanced filesystem designed to simplify managing
-#              and protecting your data.  This service mounts the ZFS
-#              filesystems and starts all related zfs services.
-### END INIT INFO
-
-export PATH=/usr/local/sbin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
-
-# Source function library & LSB routines
-. /etc/rc.d/init.d/functions
-
-# script variables
-RETVAL=0
-ZFS="@sbindir@/zfs"
-ZPOOL="@sbindir@/zpool"
-ZPOOL_CACHE="@sysconfdir@/zfs/zpool.cache"
-servicename=zfs
-LOCKFILE=/var/lock/subsys/$servicename
-
-# functions
-zfs_installed() {
-	modinfo zfs > /dev/null 2>&1 || return 5
-	$ZPOOL  > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	$ZFS    > /dev/null 2>&1
-	[ $? == 127 ] && return 5
-	return 0
-}
-
-# i need a bash guru to simplify this, since this is copy and paste, but donno how
-# to correctly dereference variable names in bash, or how to do this right
-
-# first parameter is a regular expression that filters fstab
-read_fstab() {
-        unset FSTAB
-	n=0
-        while read -r fs mntpnt fstype opts blah ; do
-                fs=`printf '%b\n' "$fs"`
-                FSTAB[$n]=$fs
-		let n++
-        done < <(egrep "$1" /etc/fstab)
-}
-
-start()
-{
-	# Disable lockfile check
-	# if [ -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-        # Requires selinux policy which has not been written.
-        if [ -r "/selinux/enforce" ] &&
-           [ "$(cat /selinux/enforce)" = "1" ]; then
-                action $"SELinux ZFS policy required: " /bin/false || return 6
-        fi
-
-	# Delay until all required block devices are present.
-	if [ -x /sbin/udevadm ]; then
-		/sbin/udevadm settle
-	elif [ -x /sbin/udevsettle ]; then
-		/sbin/udevsettle
-	fi
-
-	# load kernel module infrastructure
-	if ! grep -q zfs /proc/modules ; then
-		action $"Loading kernel ZFS infrastructure: " modprobe zfs || return 5
-	fi
-	sleep 1
-
-	action $"Mounting automounted ZFS filesystems: " $ZFS mount -a || return 152
-
-	action $"Exporting ZFS filesystems: " $ZFS share -a || return 153
-
-	# Read fstab, try to mount zvols ignoring error
-	read_fstab "^/dev/(zd|zvol)"
-	template=$"Mounting volume %s registered in fstab: "
-	for volume in "${FSTAB[@]}" ; do
-		string=`printf "$template" "$volume"`
-		action "$string" mount "$volume" 2>/dev/null || /bin/true
-	done
-
-	# touch "$LOCKFILE"
-}
-
-stop()
-{
-	# Disable lockfile check
-	# if [ ! -f "$LOCKFILE" ] ; then return 0 ; fi
-
-	# check if ZFS is installed.  If not, comply to FC standards and bail
-	zfs_installed || {
-		action $"Checking if ZFS is installed: not installed" /bin/false
-		return 5
-	}
-
-	# the poweroff of the system takes care of this
-	# but it never unmounts the root filesystem itself
-	# shit
-
-	action $"Syncing ZFS filesystems: " sync
-	     # about the only thing we can do, and then we
-	     # hope that the umount process will succeed
-	     # unfortunately the umount process does not dismount
-	     # the root file system, there ought to be some way
-	     # we can tell zfs to just flush anything in memory
-	     # when a request to remount,ro comes in
-
-	#echo -n $"Unmounting ZFS filesystems: "
-	#$ZFS umount -a
-	#RETVAL=$?
-	#if [ $RETVAL -ne 0 ]; then
-	#	failure
-
-	#	return 8
-	#fi
-	#success
-
-	rm -f "$LOCKFILE"
-}
-
-# See how we are called
-case "$1" in
-	start)
-		start
-		RETVAL=$?
-		;;
-	stop)
-		stop
-		RETVAL=$?
-		;;
-	status)
-		lsmod | grep -q zfs || RETVAL=3
-		$ZPOOL status && echo && $ZFS list || {
-			[ -f "$LOCKFILE" ] && RETVAL=2 || RETVAL=4
-		}
-		;;
-	restart)
-		stop
-		start
-		;;
-	condrestart)
-		if [ -f "$LOCKFILE" ] ; then
-			stop
-			start
-		fi
-		;;
-	*)
-		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
-		RETVAL=3
-		;;
-esac
-
-exit $RETVAL
-- 
1.7.9.1

