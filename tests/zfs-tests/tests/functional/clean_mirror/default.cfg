#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# Copyright (c) 2013 by Delphix. All rights reserved.
#

. $STF_SUITE/include/libtest.shlib

typeset -i NUMBER_OF_DISKS=0
for i in $DISKS; do
	[[ -n $MIRROR_PRIMARY ]] && MIRROR_SECONDARY=$i
	[[ -z $MIRROR_PRIMARY ]] && MIRROR_PRIMARY=$i
done

if [[ -z $MIRROR_SECONDARY ]]; then
	# We need to repartition the single disk to two slices
	SINGLE_DISK=$MIRROR_PRIMARY
	MIRROR_SECONDARY=$MIRROR_PRIMARY
	SIDE_PRIMARY_PART=0
	SIDE_SECONDARY_PART=1

	if is_linux; then
		if is_mpath_device $SINGLE_DISK; then
			export DEV_DSKDIR=$DEV_MPATHDIR
		else
			export DEV_DSKDIR=$DEV_RDSKDIR
		fi
		if ( is_mpath_device $SINGLE_DISK ) && [[ -z $(echo $SINGLE_DISK | awk 'substr($1,18,1)\
		    ~ /^[[:digit:]]+$/') ]] || ( is_real_device $SINGLE_DISK ); then
			SIDE_PRIMARY=${SINGLE_DISK}1
			SIDE_SECONDARY=${SINGLE_DISK}2
		elif ( is_mpath_device $SINGLE_DISK || is_loop_device $SINGLE_DISK ); then
			SIDE_PRIMARY=${SINGLE_DISK}p1
			SIDE_SECONDARY=${SINGLE_DISK}p2
		else
			log_fail "$SINGLE_DISK not supported for partitioning."
		fi
	else
		export DEV_DSKDIR="/dev"
		SIDE_PRIMARY=${SINGLE_DISK}s${SIDE_PRIMARY_PART}
		SIDE_SECONDARY=${SINGLE_DISK}s${SIDE_SECONDARY_PART}
	fi
else
	SIDE_PRIMARY_PART=0
	SIDE_SECONDARY_PART=0
	if is_linux; then
		if is_mpath_device $MIRROR_PRIMARY; then
			export DEV_DSKDIR=$DEV_MPATHDIR
		else
			export DEV_DSKDIR=$DEV_RDSKDIR
		fi
		if ( is_mpath_device $MIRROR_PRIMARY ) && [[ -z $(echo $MIRROR_PRIMARY | awk 'substr($1,18,1)\
		    ~ /^[[:digit:]]+$/') ]] || ( is_real_device $MIRROR_PRIMARY ); then
			SIDE_PRIMARY=${MIRROR_PRIMARY}1
		elif ( is_mpath_device $MIRROR_PRIMARY || is_loop_device $MIRROR_PRIMARY ); then
			SIDE_PRIMARY=${MIRROR_PRIMARY}p1
		else
			log_fail "$MIRROR_PRIMARY not supported for partitioning."
		fi
		if ( is_mpath_device $MIRROR_SECONDARY ) && [[ -z $(echo $MIRROR_SECONDARY | awk 'substr($1,18,1)\
		    ~ /^[[:digit:]]+$/') ]] || ( is_real_device $MIRROR_SECONDARY ); then
			SIDE_SECONDARY=${MIRROR_SECONDARY}1
		elif ( is_mpath_device $MIRROR_SECONDARY || is_loop_device $MIRROR_SECONDARY ); then
			SIDE_SECONDARY=${MIRROR_SECONDARY}p1
		else
			log_fail "$MIRROR_SECONDARY not supported for partitioning."
		fi

	else
		export DEV_DSKDIR="/dev"
		SIDE_PRIMARY=${MIRROR_PRIMARY}s${SIDE_PRIMARY_PART}
		SIDE_SECONDARY=${MIRROR_SECONDARY}s${SIDE_SECONDARY_PART}
	fi
fi

export MIRROR_PRIMARY MIRROR_SECONDARY SINGLE_DISK SIDE_PRIMARY SIDE_SECONDARY

export FILE_COUNT=10
export FILE_SIZE=$(( 1024 * 1024 ))
export MIRROR_MEGS=100
export MIRROR_SIZE=${MIRROR_MEGS}m # default mirror size
export DD_BLOCK=$(( 64 * 1024 ))
export DD_COUNT=$(( MIRROR_MEGS * 1024 * 1024 / DD_BLOCK ))
