#!/bin/ksh -p
# SPDX-License-Identifier: CDDL-1.0
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or https://opensource.org/licenses/CDDL-1.0.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2021 by Lawrence Livermore National Security, LLC.
#

. $STF_SUITE/include/libtest.shlib
. $STF_SUITE/tests/functional/redundancy/redundancy.kshlib
. $STF_SUITE/tests/functional/zia/zia.cfg

function default_zpool
{
    default_raidz_setup_noexit "${DISKS}"
    log_must zfs set compression=on "${TESTPOOL}"
    log_must zfs set checksum=on "${TESTPOOL}"
}

function zia_available
{
    zpool get -H -o value zia_available "${TESTPOOL}"
}

function dpusm_loaded
{
    if [[ "$(zia_available)" == "yes" ]]
    then
        lsmod | grep dpusm > /dev/null
        ret="$?"
        if [[ "${ret}" != "0" ]]
        then
            log_unsupported "dpusm not loaded"
        fi
    fi
}

# Providers can be loaded at any time after the dpusm
#
# The software provider must be loaded after ZFS since
# it uses ZFS symbols.
#
# If Z.I.A. is not available, the tests should still pass
#
function load_provider
{
    if [[ "$(zia_available)" == "yes" ]]
    then
        log_must insmod "${SBIN_DIR}/module/${PROVIDER}.ko"
        log_must zpool set zia_provider="${PROVIDER_MODULE}" "${TESTPOOL}"
    fi
}

function unload_provider
{
    if [[ "$(zia_available)" == "yes" ]]
    then
        log_must zpool set zia_provider="NULL" "${TESTPOOL}"
        log_must rmmod "${PROVIDER_MODULE}"
    fi
}

function offload_all
{
    log_must zpool set zia_compress="on"   "${TESTPOOL}"
    log_must zpool set zia_checksum="on"   "${TESTPOOL}"
    log_must zpool set zia_raidz1_gen="on" "${TESTPOOL}"
    log_must zpool set zia_raidz2_gen="on" "${TESTPOOL}"
    log_must zpool set zia_raidz3_gen="on" "${TESTPOOL}"
    log_must zpool set zia_raidz1_rec="on" "${TESTPOOL}"
    log_must zpool set zia_raidz2_rec="on" "${TESTPOOL}"
    log_must zpool set zia_raidz3_rec="on" "${TESTPOOL}"
    log_must zpool set zia_disk_write="on" "${TESTPOOL}"
    log_must zpool set zia_file_write="on" "${TESTPOOL}"
}

#
# loop through each combination of Z.I.A. offloads
# and make sure writing works
#
function loop_offloads_and_write
{
    for comp in on off
    do
        log_must zpool set zia_compress="${comp}" "${TESTPOOL}"

        for cksum in on off
        do
            log_must zpool set zia_checksum="${cksum}" "${TESTPOOL}"

            for raidz in on off
            do
                log_must zpool set zia_raidz1_gen="${raidz}" "${TESTPOOL}"
                log_must zpool set zia_raidz2_gen="${raidz}" "${TESTPOOL}"
                log_must zpool set zia_raidz3_gen="${raidz}" "${TESTPOOL}"

                for diskfile in on off
                do
                    log_must zpool set zia_disk_write="${diskfile}" "${TESTPOOL}"
                    log_must zpool set zia_file_write="${diskfile}" "${TESTPOOL}"

                    log_must file_write -o create -f "${FILENAME}" -b "${BLOCKSZ}" -c "${NUM_WRITES}" -d "${DATA}"
                    log_must ls -l "${FILENAME}"
                    log_must verify_pool "${TESTPOOL}"
                    log_must check_pool_status "${TESTPOOL}" "errors" "No known data errors"
                    log_must rm "${FILENAME}"
                done
            done
        done
    done
}

# copied from default_raidz_setup_noexit
function random_disk
{
    typeset disklist="$*"
    disks=(${disklist[*]})
    count="${#disks[*]}"
    idx="$(($(random 1 ${count}) - 1))"
    echo "${disks[${idx}]}"
}
