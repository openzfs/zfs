#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# Copyright (c) 2012 by Delphix. All rights reserved.
#

. $STF_SUITE/include/libtest.shlib
. $STF_SUITE/tests/functional/cli_root/zpool_add/zpool_add.cfg

#
# check if the <pool> contains <vdev> ...
#
# $1 pool
# $2..n <vdev> ...
#
# Return 0 if <vdev> are contained in the <pool>; 1 if not used; 2 if pool
# name is missing
#
function iscontained
{
	typeset pool=$1
	typeset vdev

        if [[ -z $pool ]]; then
                log_note "Missing pool name."
                return 2
        fi

	shift

	for vdev in $@; do

# remove /dev/dsk in vdev if there is
		$ECHO $vdev | $GREP "^/dev/dsk" >/dev/null 2>&1
		if (( $? == 0 )) || [[ -n "$LINUX" ]]; then
			vdev=${vdev##*/}
		fi

		$ZPOOL status "$pool" | $AWK '$1 == vdevname {exit 1}' \
			vdevname=$vdev >/dev/null 2>&1
		(( $? != 1 )) && \
			return 1
	done

	return 0;

}

#
# Find the storage device in /etc/vfstab
#
function find_vfstab_dev
{
	typeset vfstab="/etc/vfstab"
	typeset tmpfile="/tmp/vfstab.tmp"
	typeset vfstabdev
	typeset vfstabdevs=""
	typeset line

	$CAT $vfstab | $GREP "^/dev/dsk" >$tmpfile
	while read -r line
	do
		vfstabdev=`$ECHO "$line" | $AWK '{print $1}'`
		vfstabdev=${vfstabdev%%:}
		vfstabdevs="$vfstabdev $vfstabdevs"
	done <$tmpfile

	$RM -f $tmpfile
	$ECHO $vfstabdevs
}

#
# Find the storage device in /etc/mnttab
#
function find_mnttab_dev
{
	typeset mnttab="$MNTTAB"
	typeset tmpfile="/tmp/mnttab.tmp"
	typeset mnttabdev
	typeset mnttabdevs=""
	typeset line

	$CAT $mnttab | $GREP "^/dev/dsk" >$tmpfile
	while read -r line
	do
		mnttabdev=`$ECHO "$line" | $AWK '{print $1}'`
		mnttabdev=${mnttabdev%%:}
		mnttabdevs="$mnttabdev $mnttabdevs"
	done <$tmpfile

	$RM -f $tmpfile
	$ECHO $mnttabdevs
}

#
# Save the systme current dump device configuration
#
function save_dump_dev
{

	typeset dumpdev
	typeset fnd="Dump device"

	dumpdev=`$DUMPADM | $GREP "$fnd" | $CUT -f2 -d : | \
		$AWK '{print $1}'`
	$ECHO $dumpdev
}

#
# Common cleanup routine for partitions used in testing
#
function partition_cleanup
{

        if [[ -n $DISK ]]; then
                partition_disk $SIZE $DISK 7
        else
                typeset disk=""
                for disk in $DISK0 $DISK1; do
                        partition_disk $SIZE $disk 7
                done
        fi

}
