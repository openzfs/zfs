#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# Copyright (c) 2016 by Delphix. All rights reserved.
#

. $STF_SUITE/tests/functional/atime/atime.cfg
. $STF_SUITE/include/libtest.shlib

#
# Check if the access time for specified file is updated.
#
# $1 Given an absolute path to a file name
#
# Return value:
#	0 -> The access time is updated.
#	1 -> The access time is not updated.
#
function check_atime_updated
{
	typeset filename=$1

	if is_linux; then
		typeset before=$(stat -c %X $filename)
		sleep 2
	elif is_freebsd; then
		typeset before=$(stat -f %a $filename)
		sleep 2
	else
		typeset before=$(ls -Eu $filename | awk '{print $7}')
	fi

	log_must cat $filename

	if is_linux; then
		typeset after=$(stat -c %X $filename)
	elif is_freebsd; then
		typeset after=$(stat -f %a $filename)
	else
		typeset after=$(ls -Eu $filename | awk '{print $7}')
	fi

	if [[ $before != $after ]]; then
		return 0
	else
		return 1
	fi
}

function setup_snap_clone
{
	if [ -d "/$TESTPOOL/$TESTFS" ]; then
		# No mountpoint case (default).
		log_must touch /$TESTPOOL/$TESTFS/$TESTFILE
	else
		# Create two file to verify snapshot.
		log_must touch $TESTDIR/$TESTFILE
	fi

	create_snapshot $TESTPOOL/$TESTFS $TESTSNAP
	create_clone $TESTPOOL/$TESTFS@$TESTSNAP $TESTPOOL/$TESTCLONE
}

function reset_atime
{
	zfs inherit atime $TESTPOOL
	zfs inherit atime $TESTPOOL/$TESTFS
	zfs inherit atime $TESTPOOL/$TESTCLONE
	zfs inherit relatime $TESTPOOL
	zfs inherit relatime $TESTPOOL/$TESTFS
	zfs inherit relatime $TESTPOOL/$TESTCLONE
}

function cleanup
{
	destroy_clone $TESTPOOL/$TESTCLONE
	destroy_snapshot $TESTPOOL/$TESTFS@$TESTSNAP
}
