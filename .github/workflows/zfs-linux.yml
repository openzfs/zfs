name: zfs-linux

on:
  push:
  pull_request:

jobs:

#  build:
#    name: Build
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [20.04]
#    runs-on: ubuntu-${{ matrix.os }}
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        ref: ${{ github.event.pull_request.head.sha }}
#    - name: Build modules
#      run: .github/workflows/scripts/setup-dependencies.sh build
#    - name: Prepare modules upload
#      run: tar czf modules-${{ matrix.os }}.tgz *.deb .github tests/test-runner tests/ImageOS.txt
#    - uses: actions/upload-artifact@v4
#      with:
#        name: modules-${{ matrix.os }}
#        path: modules-${{ matrix.os }}.tgz
#        retention-days: 14
#
#  tests:
#    name: Tests
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [20.04]
#    needs: build
#    uses: ./.github/workflows/zfs-linux-tests.yml
#    with:
#      os: ${{ matrix.os }}

  qemu-vm:
    name: QEMU
    strategy:
      fail-fast: false
      matrix:
        os: [almalinux8, almalinux9, archlinux, centos-stream8, centos-stream9, fedora38, fedora39, debian11, debian12, freebsd13, freebsd14, freebsd15, ubuntu22, ubuntu24]

    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Setup QEMU
      run: .github/workflows/scripts/qemu-1-setup.sh
    - name: Start QEMU machine
      run: .github/workflows/scripts/qemu-2-start.sh ${{ matrix.os }}
    - name: Install dependencies in QEMU machine
      timeout-minutes: 15
      run: |
        echo "Install dependencies in QEMU machine"
        echo "StrictHostKeyChecking no" >> $HOME/.ssh/config
        echo "ConnectTimeout 1" >> $HOME/.ssh/config
        while pidof /usr/bin/qemu-system-x86_64 >/dev/null; do
          sleep 1
          IP=`arp | grep "^192.168.122."| cut -d' ' -f1`
          test -z "$IP" && continue
          ssh -v zfs@$IP "uname -a" && break
        done
        echo IP=$IP >> $GITHUB_ENV
        scp .github/workflows/scripts/qemu-3-deps.sh zfs@$IP:qemu-3-deps.sh
        ssh zfs@$IP '$HOME/qemu-3-deps.sh' ${{ matrix.os }} && true
        # restart vm with new kernel and so on
        while pidof /usr/bin/qemu-system-x86_64 >/dev/null; do sleep 5; done
        sleep 1
        sudo virsh start openzfs
        sleep 5
    - name: Build modules in QEMU machine
      timeout-minutes: 30
      run: |
        echo "Build modules in QEMU machine"
        while pidof /usr/bin/qemu-system-x86_64 >/dev/null; do
          sleep 1
          ssh 2>/dev/null zfs@${{ env.IP }} "uname -a" && break
        done
        rsync -ar $HOME/work/zfs/zfs zfs@${{ env.IP }}:./
        ssh zfs@${{ env.IP }} '$HOME/zfs/.github/workflows/scripts/qemu-4-build.sh' ${{ matrix.os }}
    - name: Load modules in QEMU machine
      timeout-minutes: 2
      run: |
        ssh zfs@${{ env.IP }} '$HOME/zfs/.github/workflows/scripts/qemu-5-load.sh' ${{ matrix.os }}
    - name: Run tests in QEMU machine
      timeout-minutes: 400
      run: |
        echo "Start logging serial console before running tests"
        # Save the VM's serial output (ttyS0) to /var/tmp/console-$OS.txt
        # ttyS0 on the VM corresponds to a local /dev/pty/N entry.
        # Use 'virsh ttyconsole' to lookup the /dev/pty/N entry.
        OS=${{ matrix.os }}
        read pty <<< $(sudo virsh ttyconsole "openzfs")
        sudo mkdir -p /var/tmp
        echo "Begin console for $OS" | sudo tee /var/tmp/console-$OS.txt
        sudo nohup bash -c "cat $pty > /var/tmp/console-$OS.txt" &
        echo "pty $pty, console started"
        ssh zfs@${{ env.IP }} '$HOME/zfs/.github/workflows/scripts/qemu-6-tests.sh' ${{ matrix.os }}
    - name: Prepare artifacts
      if: success() || failure()
      run: |
        RESPATH="/var/tmp/test_results"
        echo "rsyncing"
        rsync -arL zfs@${{ env.IP }}:$RESPATH/current $RESPATH || true
        echo "scp-ing"
        scp zfs@$IP:"/var/tmp/*.txt" /var/tmp || true 
        grep -A 100 'Results Summary' $RESPATH/current/log || true
        cp -f /var/tmp/*.txt $RESPATH || true
        ls -l $RESPATH || true
        tar cf qemu-${{ matrix.os }}.tar -C $RESPATH -h current uname.txt \
          osname.txt dmesg-prerun.txt dmesg-module-load.txt make-stderr.txt \
          console-${{ matrix.os }}.txt || true
        echo "done tarring, files in pwd $(pwd)"
        ls -l
    - uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: Logs-functional-${{ matrix.os }} 
        path: qemu-${{ matrix.os }}.tar
        if-no-files-found: ignore
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: console-${{ matrix.os }}.txt
        path: /var/tmp/console-${{ matrix.os }}.txt
        if-no-files-found: ignore
        compression-level: 0
  cleanup:
    if: always()
    name: Cleanup
    runs-on: ubuntu-22.04
#    needs: [ qemu-vm, tests ]
    needs: [ qemu-vm ]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: actions/download-artifact@v4
    - name: Generating summary
      run: .github/workflows/scripts/generate-summary.sh
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 1
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 2
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 3
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 4
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 5
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 6
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 7
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 8
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 9
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 10
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 11
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 12
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 13
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 14
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 15
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 16
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 17
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 18
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 19
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 20
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 21
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 22
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 23
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 24
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 25
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 26
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 27
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 28
    - name: Generating summary...
      run: .github/workflows/scripts/generate-summary.sh 29
    - uses: actions/upload-artifact@v4
      with:
        name: Summary Files
        path: out-*
